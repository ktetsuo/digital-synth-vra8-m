# digital synth prototype

PWM_RATE = 62500
AUDIO_RATE = 31250

WAVE_SAW         = 0x00
WAVE_PULSE_6_25  = 0x01
WAVE_PULSE_12_5  = 0x02
WAVE_PULSE_18_75 = 0x03
WAVE_PULSE_25    = 0x04
WAVE_PULSE_31_25 = 0x05
WAVE_PULSE_37_5  = 0x06
WAVE_PULSE_43_75 = 0x07
WAVE_SQUARE      = 0x08
WAVE_TRIANGLE    = 0x09
WAVE_NOISE       = 0x1E
WAVE_SILENCE     = 0x1F

$wave_table_saw         = [0xF,0xF,0xE,0xE,0xD,0xD,0xC,0xC,0xB,0xB,0xA,0xA,0x9,0x9,0x8,0x8,0x7,0x7,0x6,0x6,0x5,0x5,0x4,0x4,0x3,0x3,0x2,0x2,0x1,0x1,0x0,0x0,]
$wave_table_pulse_6_25  = [0xF,0xF,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,]
$wave_table_pulse_12_5  = [0xF,0xF,0xF,0xF,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,]
$wave_table_pulse_18_75 = [0xF,0xF,0xF,0xF,0xF,0xF,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,]
$wave_table_pulse_25    = [0xF,0xF,0xF,0xF,0xF,0xF,0xF,0xF,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,]
$wave_table_pulse_31_25 = [0xF,0xF,0xF,0xF,0xF,0xF,0xF,0xF,0xF,0xF,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,]
$wave_table_pulse_37_5  = [0xF,0xF,0xF,0xF,0xF,0xF,0xF,0xF,0xF,0xF,0xF,0xF,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,]
$wave_table_pulse_43_75 = [0xF,0xF,0xF,0xF,0xF,0xF,0xF,0xF,0xF,0xF,0xF,0xF,0xF,0xF,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,]
$wave_table_square      = [0xF,0xF,0xF,0xF,0xF,0xF,0xF,0xF,0xF,0xF,0xF,0xF,0xF,0xF,0xF,0xF,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,]
$wave_table_triangle    = [0x8,0x9,0xA,0xB,0xC,0xD,0xE,0xF,0xF,0xE,0xD,0xC,0xB,0xA,0x9,0x8,0x7,0x6,0x5,0x4,0x3,0x2,0x1,0x0,0x0,0x1,0x2,0x3,0x4,0x5,0x6,0x7,]
$wave_table_silence     = [0x8,0x8,0x8,0x8,0x8,0x8,0x8,0x8,0x8,0x8,0x8,0x8,0x8,0x8,0x8,0x8,0x8,0x8,0x8,0x8,0x8,0x8,0x8,0x8,0x8,0x8,0x8,0x8,0x8,0x8,0x8,0x8,]

$wave_tables = [
  $wave_table_saw,         $wave_table_pulse_6_25,  $wave_table_pulse_12_5, $wave_table_pulse_18_75,
  $wave_table_pulse_25,    $wave_table_pulse_31_25, $wave_table_pulse_37_5, $wave_table_pulse_43_75,
  $wave_table_square,      $wave_table_triangle,    $wave_table_silence,    $wave_table_silence,
  $wave_table_silence,     $wave_table_silence,     $wave_table_silence,    $wave_table_silence,
  $wave_table_silence,     $wave_table_silence,     $wave_table_silence,    $wave_table_silence,
  $wave_table_silence,     $wave_table_silence,     $wave_table_silence,    $wave_table_silence,
  $wave_table_silence,     $wave_table_silence,     $wave_table_silence,    $wave_table_silence,
  $wave_table_silence,     $wave_table_silence,     $wave_table_silence,    $wave_table_silence,
]

$note_to_freq = [
  0x000F,0x000F,0x000F,0x000F,0x000F,0x000F,0x000F,0x000F,0x000F,0x000F,0x000F,0x000F,
  0x000F,0x000F,0x000F,0x000F,0x000F,0x000F,0x000F,0x000F,0x000F,0x000F,0x000F,0x000F,
  0x0044,0x0048,0x004C,0x0051,0x0056,0x005B,0x0060,0x0066,0x006C,0x0073,0x007A,0x0081,
  0x0089,0x0091,0x0099,0x00A3,0x00AC,0x00B7,0x00C1,0x00CD,0x00D9,0x00E6,0x00F4,0x0102,
  0x0112,0x0122,0x0133,0x0146,0x0159,0x016E,0x0183,0x019B,0x01B3,0x01CD,0x01E8,0x0205,
  0x0224,0x0245,0x0267,0x028C,0x02B3,0x02DC,0x0307,0x0336,0x0366,0x039A,0x03D1,0x040B,
  0x0449,0x048A,0x04CF,0x0518,0x0566,0x05B8,0x060F,0x066C,0x06CD,0x0735,0x07A3,0x0817,
  0x0892,0x0915,0x099F,0x0A31,0x0ACD,0x0B71,0x0C1F,0x0CD8,0x0D9B,0x0E6A,0x0F46,0x102E,
  0x000F,0x000F,0x000F,0x000F,0x000F,0x000F,0x000F,0x000F,0x000F,0x000F,0x000F,0x000F,
  0x000F,0x000F,0x000F,0x000F,0x000F,0x000F,0x000F,0x000F,0x000F,0x000F,0x000F,0x000F,
  0x000F,0x000F,0x000F,0x000F,0x000F,0x000F,0x000F,0x000F,
]

def high_byte(us)
  us >> 8
end

def low_byte(us)
  us & 0xFF
end

class OSC
  def initialize
    @wave_table = $wave_tables[WAVE_SILENCE]
    @freq = $note_to_freq[60]
    @phase = 0
  end

  def set_wave(wave)
    @wave_table = $wave_tables[wave]
  end

  def set_note(note)
    @freq = $note_to_freq[note]
  end

  def reset
    @phase = 0
  end

  def clock(mod_level)
    f1 = @freq
    f2 = (f1 >> 5)
    f2 *= (mod_level - 8)
    f2 >>= 6
    @phase += f1
    @phase += f2
    @phase &= 0xFFFF
    curr_index = high_byte(@phase) >> 3
    next_index = (curr_index + 1) & 0x1F
    next_weight = ((high_byte(@phase) & 0x07) << 1) | (low_byte(@phase) >> 7)
    curr_weight = 0x10 - next_weight
    level = @wave_table[curr_index] * curr_weight
    level += @wave_table[next_index] * next_weight
    return level
  end
end

osc = [OSC.new, OSC.new, OSC.new, OSC.new]
osc[0].set_wave(WAVE_SAW)
osc[1].set_wave(WAVE_SQUARE)
osc[2].set_wave(WAVE_TRIANGLE)
osc[3].set_wave(WAVE_NOISE)

envelope_lead = [0,40,256,0]
envelope_level_max = 256
A = 0
D = 1
S = 2
R = 3

envelope = envelope_lead
eg_level = 0
lfo_wave = $wave_table_triangle
lfo_phase = 0

NOTE_ON  = 0x80
NOTE_OFF = 0x90

eg_state = A
eg_rest = 0
lfo_wait = (AUDIO_RATE * 1 / 2)
lfo_phase = 0

class LPF
  attr_accessor :x_0, :x_1, :x_2, :y_0, :y_1, :y_2
  attr_accessor :b0_a0, :b1_a0, :b2_a0, :a1_a0, :a2_a0
end

lpf = LPF.new

lpf.x_0, lpf.x_1, lpf.x_2, lpf.y_0, lpf.y_1, lpf.y_2 = 0, 0, 0, 0, 0, 0

  lpf.b0_a0, lpf.b1_a0, lpf.b2_a0, lpf.a1_a0, lpf.a2_a0 = 19, 37, 19,   0, 11 # f_cutoff = AUDIO_RATE /  4, Q = 0.7071
# lpf.b0_a0, lpf.b1_a0, lpf.b2_a0, lpf.a1_a0, lpf.a2_a0 =  6, 12,  6, -60, 21 # f_cutoff = AUDIO_RATE /  8, Q = 0.7071
# lpf.b0_a0, lpf.b1_a0, lpf.b2_a0, lpf.a1_a0, lpf.a2_a0 =  2,  4,  2, -93, 37 # f_cutoff = AUDIO_RATE / 16, Q = 0.7071

midi_in_prev = 0xFF
midi_in_pprev = 0xFF

STDIN.binmode
File::open(__FILE__ + ".wav","w+b") do |file|
  data_size = 2 * AUDIO_RATE * 9
  file_size = data_size + 36
  file.write("RIFF")
  file.write([file_size - 8].pack("V"))
  file.write("WAVE")
  file.write("fmt ")
  file.write([16].pack("V"))
  file.write([1].pack("v"))
  file.write([1].pack("v"))
  file.write([AUDIO_RATE].pack("V"))
  file.write([AUDIO_RATE * 2].pack("V"))
  file.write([1 * 2].pack("v"))
  file.write([16].pack("v"))
  file.write("data")
  file.write([data_size].pack("V"))

  while(c = STDIN.read(1)) do
    b = c.ord

    if (midi_in_pprev == NOTE_ON && midi_in_prev <= 0x7F && b <= 0x7F)
      note = midi_in_prev
      osc[0].set_note(note)
      osc[0].reset
      eg_state = A
      eg_level = 0
      eg_rest = envelope[eg_state]
      lfo_wait = (AUDIO_RATE * 1 / 2)
      lfo_phase = 0
    end
    if (midi_in_pprev == NOTE_OFF && midi_in_prev <= 0x7F && b <= 0x7F)
      eg_state = R
      eg_rest = envelope[eg_state]
    end
    midi_in_pprev = midi_in_prev
    midi_in_prev = b

    for i in (0...10) do

      # LFO
      if (lfo_wait > 0)
        lfo_wait -= 1
      else
        lfo_phase += 0xCCC
        lfo_phase %= 0x10000
      end

      # OSC
      level = osc[0].clock($wave_table_triangle[lfo_phase >> 11])

      # EG
      eg_rest -= 1
      case (eg_state)
      when A
        if eg_rest <= 0
          if eg_level < envelope_level_max
            eg_level += 1
            eg_rest = envelope[eg_state]
          else
            eg_state = D
            eg_rest = envelope[eg_state]
          end
        end
      when D
        if eg_rest <= 0
          if eg_level > envelope[2]
            eg_level -= 1
            eg_rest = envelope[eg_state]
          else
            eg_state = S
            eg_rest = 9999
          end
        end
      when S
      when R
        if eg_rest <= 0
          if eg_level > 0
            eg_level -= 1
            eg_rest = envelope[eg_state]
          else
            eg_level = 0
            eg_rest = 9999
          end
        end
      end

      # AMP
      level = level * eg_level / envelope_level_max

      # MIXER
      level = level / 4 * 4

      # LPF
      lpf.x_0 = level
      lpf.y_0 = ((lpf.b0_a0 * lpf.x_0) + (lpf.b1_a0 * lpf.x_1) + (lpf.b2_a0 * lpf.x_2) - (lpf.a1_a0 * lpf.y_1) - (lpf.a2_a0 * lpf.y_2)) / 64;
      if (lpf.y_0 < 0)
        lpf.y_0 = 0
      end
      lpf.x_2 = lpf.x_1;
      lpf.x_1 = lpf.x_0;
      lpf.y_2 = lpf.y_1;
      lpf.y_1 = lpf.y_0;

      # PWM
#     file.write([level * 32].pack("S"))
      file.write([lpf.y_0 * 32].pack("S"))
    end
  end
end
